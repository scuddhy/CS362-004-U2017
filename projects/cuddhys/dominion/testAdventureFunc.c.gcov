        -:    0:Source:testAdventureFunc.c
        -:    0:Graph:testAdventureFunc.gcno
        -:    0:Data:testAdventureFunc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/****************************************
        -:    2: *testAdventureFunc.c
        -:    3: *
        -:    4: * Description: unit test for adventureFunc()
        -:    5:****************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:
function main called 1 returned 100% blocks executed 79%
        1:   15:int main(int argc, char* argv[]){
        1:   16:	printf("Executing adventureFuncTesting...\n");
call    0 returned 100%
        -:   17:	
        1:   18:	int currentPlayer = 1;
        1:   19:	struct gameState* state = newGame();
call    0 returned 100%
        1:   20:	int k[10] ={adventurer, council_room, feast, gardens, mine, remodel, smithy, village, baron,
        -:   21:		great_hall};
        1:   22:	int passed = 1;
        -:   23:	int x;
        -:   24:
        1:   25:	initializeGame(MAX_PLAYERS, k, 1000, state);
call    0 returned 100%
        -:   26:
        -:   27:	
        -:   28:	//call without deck shuffle
        1:   29:	state->deckCount[1] = 1;
        1:   30:	x = adventurerFunc(currentPlayer, state); 
call    0 returned 100%
        1:   31:	if (x != 0) { passed = 0; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   32:
        -:   33:
        -:   34:	//call with deck shuffle
        1:   35:	state->deckCount[1] = 0;
        1:   36:	x = adventurerFunc(currentPlayer, state);
call    0 returned 100%
        1:   37:	if (x != 0) { passed = 0; }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   38:
        -:   39:
        1:   40:	if(passed == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   41:		printf("adventureFunc test passed!\n");
call    0 returned 100%
        -:   42:	}
        -:   43:	else {
    #####:   44:		printf("adventureFunct test failed!\n");
call    0 never executed
        -:   45:	}
        -:   46:
        -:   47:
        1:   48:	free(state);
        1:   49:	return 0; 
        -:   50:}
        -:   51:
        -:   52:
