        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/***************************************************
        -:    2: * Author: Shawn Cuddhy
        -:    3: * Description: Random tester for the village card
        -:    4:****************************************************/
        -:    5:
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:
function villageFuncTwo called 500 returned 100% blocks executed 100%
      500:   15:int villageFuncTwo(int currentPlayer, struct gameState* state, int handPos){
      500:   16:	int arr[3] = {0, 1, 2};
        -:   17:	int i;
        -:   18:	int x;
        -:   19:
        -:   20:	//+1 Card
      500:   21:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:   22:
        -:   23:	//+2 Actions
      500:   24:	state->numActions = state->numActions + 2;
        -:   25:
     2500:   26:	for(i = 0; i < 4; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     2000:   27:		x += arr[i];
        -:   28:	}
        -:   29:
        -:   30:	//discard played card from hand
      500:   31:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      500:   32:	return 0;
        -:   33:}
        -:   34:
        -:   35:
        -:   36:
        -:   37:
        -:   38:
        -:   39:
function main called 5 returned 100% blocks executed 100%
        5:   40:int main(int argc, char* argv[]){
        5:   41:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        5:   42:	int i = 0;
        5:   43:	int seed = 1000;
        5:   44:	int loopCt = 100;
        5:   45:	int numPlayer =rand() % MAX_PLAYERS;
call    0 returned 100%
        5:   46:	int passed = 1;
        5:   47:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   48:		smithy, village, baron, great_hall};
        5:   49:	struct gameState* state = newGame();
call    0 returned 100%
        5:   50:	printf("Executing Village Func test....\n");
call    0 returned 100%
        -:   51:	
        -:   52:	
        -:   53:	//loop through test, random value for numPlayer and current Player 
      505:   54:	for(i = 0; i < loopCt; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      500:   55:		initializeGame(numPlayer, k, seed, state);
call    0 returned 100%
      500:   56:		int currentPlayer = rand()% numPlayer;
call    0 returned 100%
      500:   57:		printf("Executing test# %d\n", i);
call    0 returned 100%
      500:   58:		int cardBefore = state->handCount[currentPlayer];
      500:   59:		int actionBefore = state->numActions;
      500:   60:		villageFuncTwo(currentPlayer, state, 1);
call    0 returned 100%
      500:   61:		int cardAfter = state->handCount[currentPlayer];
      500:   62:		int actionAfter = state->numActions;
      500:   63:		int cardSum = cardAfter - cardBefore;
      500:   64:		int actionSum = actionAfter - actionBefore;
        -:   65:
        -:   66:		
      500:   67:		if(cardSum != 0) {
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
      100:   68:			passed = 0;
      100:   69:			printf("number of cards is wrong\n");
call    0 returned 100%
        -:   70:		}
      500:   71:		if(actionSum != 2) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:   72:			passed = 0;
        1:   73:			printf("action sum is wrong\n");
call    0 returned 100%
        -:   74:		}
        -:   75:
        -:   76:	}
        -:   77:	
        -:   78:	//return results of the test	
        5:   79:	if(passed == 1){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:   80:		printf("Test passed!\n");
call    0 returned 100%
        -:   81:	}
        -:   82:	else{
        1:   83:		printf("Test failed!\n");
call    0 returned 100%
        -:   84:	}
        -:   85:
        5:   86:	return 0;
        -:   87:
        -:   88:}
        -:   89:
        -:   90:
