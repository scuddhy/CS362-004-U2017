        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:12
        -:    0:Programs:1
        -:    1:/*****************************************************
        -:    2: * Author: Shawn Cuddhy
        -:    3: * Description: random tester for the Great_Hall card
        -:    4:******************************************************/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include <string.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include "rngs.h"
        -:   12:
        -:   13:
        -:   14:
        -:   15:
function great_HallFuncTwo called 1200 returned 100% blocks executed 100%
     1200:   16:int great_HallFuncTwo(int currentPlayer, struct gameState* state, int handPos){
        -:   17:	//+1 card
     1200:   18:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:   19:
        -:   20:	//+1 Actions
     1200:   21:	state->numActions++;
        -:   22:
     1200:   23:	void* x = state;
     1200:   24:	x++;
     1200:   25:	printf("%d", x);
call    0 returned 100%
        -:   26:
        -:   27:	//discard card from hand
     1200:   28:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1200:   29:	return 0;
        -:   30:
        -:   31:}
        -:   32:
        -:   33:
        -:   34:
function main called 12 returned 100% blocks executed 94%
       12:   35:
       12:   36:int main(int argc, char* argv[]){
call    0 returned 100%
call    1 returned 100%
       12:   37:	srand(time(NULL));
call    0 returned 100%
        -:   38:	printf("Executing great hall test...\n");
       12:   39:	
call    0 returned 100%
       12:   40:	struct gameState* state = newGame();	
        -:   41:	int k[10] = {adventurer, council_room, feast, gardens, mine, remodel,
        -:   42:		smithy, village, baron, great_hall};
       12:   43:
       12:   44:	int x = 0;
       12:   45:	int i = 0;
       12:   46:	int loopCt = 100;
       12:   47:	int passed = 1;
call    0 returned 100%
       12:   48:	int numPlayers = rand()% MAX_PLAYERS;
        -:   49:	int currentPlayer = 0;
        -:   50:
        -:   51:
        -:   52:
     1212:   53:	//randomize the number of players and the current player for each game.
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1200:   54:	for(i = 0; i < loopCt; i++){
call    0 returned 100%
     1200:   55:		printf("Test Case# %d\n", i);
call    0 returned 100%
     1200:   56:		initializeGame(numPlayers, k, 1000, state);
call    0 returned 100%
     1200:   57:		currentPlayer = rand() % numPlayers;
call    0 returned 100%
     1200:   58:		x = great_HallFuncTwo(currentPlayer, state, 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   59:		if(x != 0) { passed = 0; }
        -:   60:	}
        -:   61:
        -:   62:	
       12:   63:	//print result of the random tests
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       12:   64:	if(passed == 1){
call    0 returned 100%
        -:   65:		printf("Test passed!\n");
        -:   66:	}
       12:   67:
        -:   68:	return 0;
        -:   69:}
        -:   70:
